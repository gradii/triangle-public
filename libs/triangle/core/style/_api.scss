@use "sass:map";
@use "sass:meta";
@use "mixins/breakpoints";
@use "mixins/utilities";
@use "mixins/rfs";
@use "variables" as v;

// Loop over each breakpoint

@mixin tri-api($utilities) {

  @each $breakpoint in map.keys(v.$grid-breakpoints) {

    // Generate media query if needed
    @include breakpoints.media-breakpoint-up($breakpoint) {
      $infix : breakpoints.breakpoint-infix($breakpoint, v.$grid-breakpoints);

      // Loop over each utility property
      @each $key, $utility in $utilities {
        // The utility can be disabled with `false`, thus check if the utility is a map first
        // Only proceed if responsive media queries are enabled or if it's the base media query
        @if meta.type-of($utility) == "map" and (map.get($utility, responsive) or $infix == "") {
          @include utilities.generate-utility($utility, $infix);
        }
      }
    }
  }

  // RFS rescaling
  @media (min-width : rfs.$rfs-mq-value) {
    @each $breakpoint in map.keys(v.$grid-breakpoints) {
      $infix : breakpoints.breakpoint-infix($breakpoint, v.$grid-breakpoints);

      @if (map.get( v.$grid-breakpoints, $breakpoint) < rfs.$rfs-breakpoint) {
        // Loop over each utility property
        @each $key, $utility in $utilities {
          // The utility can be disabled with `false`, thus check if the utility is a map first
          // Only proceed if responsive media queries are enabled or if it's the base media query
          @if meta.type-of($utility) == "map" and map.get($utility, rfs) {
            @include utilities.generate-utility($utility, $infix, true);
          }
        }
      }
    }
  }


  // Print utilities
  @media print {
    @each $key, $utility in $utilities {
      // The utility can be disabled with `false`, thus check if the utility is a map first
      // Then check if the utility needs print styles
      @if meta.type-of($utility) == "map" and map.get($utility, print) == true {
        @include utilities.generate-utility($utility, "-print");
      }
    }
  }
}