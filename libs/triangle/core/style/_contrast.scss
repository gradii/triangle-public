@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "sass:meta";
@use "functions";

@use "sass:color";
@use "variables" as v;

// Color Contrast
// ==============

// WCAG Contrast
// -------------
/// These named contrast-ratios are defined by the [WCAG][WCAG].
///
/// [WCAG]: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast
///
/// @access private
$WCAG-CONTRAST : (// sass-lint:disable-line variable-name-format
  "AA-large": 3,
  "AA": 4.5,
  "AAA": 7,
);

// Contrast
// --------
/// For any color, select the best contrast among a set of options.
/// For best results, pass in a combination of light and dark colors
/// to contrast against – 
/// or define default `contrast-light` and `contrast-dark` values
/// in your global `$colors` map.
///
/// @group contrast
///
/// @param {string | list} $color -
///   The name or value of a color.
/// @param {arglist} $options [#000, #fff] -
///   Two or more colors to contrast against.
///   This function will choose the best contrast of all the options provided,
///   or the `contrast-light` and `contrast-dark` defaults
///   if they are defined in your color palette,
///   otherwise `white` and `black` are the default options.
/// @return {color} -
///   Whichever color-option has the highest contrast-ratio to `$color`.
///
/// @example scss - default options
///   $background: #333;
///   html {
///     background: $background;
///     color: contrast($background);
///   }
/// @example scss - explicit options
///   $background: #333;
///   html {
///     background: $background;
///     color: contrast($background, red, orange, yellow, green, blue, indigo);
///   }
@function color-contrast(
  $background,
  $color-contrast-dark: v.$color-contrast-dark,
  $color-contrast-light: v.$color-contrast-light,
  $min-contrast-ratio: v.$min-contrast-ratio
) {
  $foregrounds: $color-contrast-light, $color-contrast-dark, #fff, #000;
  $max-ratio: 0;
  $max-ratio-color: null;

  @each $color in $foregrounds {
    $contrast-ratio: contrast-ratio($background, $color);
    @if $contrast-ratio > $min-contrast-ratio {
      @return $color;
    } @else if $contrast-ratio > $max-ratio {
      $max-ratio: $contrast-ratio;
      $max-ratio-color: $color;
    }
  }

  @warn "Found no color leading to #{$min-contrast-ratio}:1 contrast ratio against #{$background}...";

  @return $max-ratio-color;
}


@function contrast(
  $color,
  $options...
) {
  // Establish default options if they are missing
  @if list.length($options) == 0 {
    $options : list.append($options, map.get($colors, "contrast-light") or #fff);
    $options : list.append($options, map.get($colors, "contrast-dark") or #000);
  } @else if list.length($options) == 1 {
    @error "Provide at least two contrasting color options for `contrast()`";
  }

  // Get the colors and their contrasts
  $color-val : $color;
  $color-lum : luminance($color-val);
  $color-list : ();
  $contrast-list : ();

  @each $item in $options {
    $luminance : luminance($item);
    $contrast : contrast-ratio($color-lum, $luminance);
    $color-list : list.append($color-list, $item);
    $contrast-list : list.append($contrast-list, $contrast);
  }

  // Find the best results
  $best-ratio : math.max($contrast-list...);
  $best-color : list.nth($color-list, list.index($contrast-list, $best-ratio));
  @return $best-color;
}

// Contrasted
// ----------
/// Apply any background color,
/// along with the highest-contraast text color from a set of options.
/// This works the same as the `contrast` function,
/// but applies the resulting values to `background-color`
/// and text `color` properties.
///
/// @group contrast
///
/// @param {string | list} $background -
///   The name or value of your desired background color.
/// @param {arglist} $options [#fff, #000] -
///   A list of colors to contrast against,
///   defaulting to `white` and `black`
///   or your `contrast-light` and `contrast-dark` settings
///   if they are prodided in the global `$colors` map.
/// @output -
///   Sets the `background-color` to `$background`
///   and the foreground `color` to
///   whichever option has better contrast against the given background.
///
/// @example scss - default options
///   $background: #333;
///   html {
///     @include contrasted($background);
///   }
/// @example scss - explicit options
///   $background: #333;
///   html {
///     @include contrasted($background, red, orange, yellow, green, blue, indigo);
///   }
@mixin contrasted(
  $background,
  $options...
) {
  $background      : color($background);
  background-color : $background;
  color            : contrast($background, $options...);
}

// Contrast Ratio
// --------------
/// Compare two colors using the WCAG comparison algorythm,
/// and return the resulting contrast-ratio.
/// Optionally pass in a standard (AA, AAA, AA-large)
/// and return `false` when the contrast-check fails.
///
/// - 'AA-large' == `3:1`
/// - 'AA' == `4.5:1`
/// - 'AAA' == `7:1`
///
/// @group contrast
/// @link http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef WCAG Contrast Definition
///
/// @param {string | list | number} $color -
///   The name of a color in your palette,
///   any other color value,
///   or even a pre-calculated numeric luminance.
/// @param {string | list | number} $contrast -
///   The name or value of a color to contrast against the first.
/// @param {'AA' | 'AA-large' | 'AAA' | number | false} $require [false] -
///   An optional WCAG contrast ratio to require.
///   The function will return `false` if the required ratio is not met.
/// @return {number} -
///   The WCAG-defined contrast-ratio of two colors.
///
/// @example scss
///   /* black and white: #{contrast-ratio(white, black)} */
///   /* failed 'AAA': #{contrast-ratio(white, #999, 'AAA')} */
@function contrast-ratio(
  $base,
  $contrast,
  $require: false
) {
  $uppercase : (
    "aaa": "AAA",
    "aa": "AA",
    "aa-large": "AA-large"
  );
  $base-lumin : luminance($base);
  $contrast-lumin : luminance(functions.opaque($base, $contrast));
  $darker : math.min($base-lumin, $contrast-lumin);
  $lighter : math.max($base-lumin, $contrast-lumin);
  $ratio : math.div($lighter + 0.05, $darker + 0.05);

  @if (meta.type-of($require) != "number") {
    $require : map.get($uppercase, $require) or $require;
    $require : map.get($WCAG-CONTRAST, $require); // sass-lint:disable-line variable-name-format
  }

  @if $require and ($ratio < $require) {
    @return false;
  }

  @return $ratio;
}

// Luminance
// ---------
/// Get the WCAG luminance of a color in your palette.
///
/// @group contrast
/// @link http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef WCAG Relative Luminance
///
/// @param {string | list} $color -
///   The name or value of a color.
/// @return {number} -
///   WCAG-defined numeric luminance value.
@function luminance($color) {
  $_luminance-list : .0008 .001 .0011 .0013 .0015 .0017 .002 .0022 .0025 .0027 .003 .0033 .0037 .004 .0044 .0048 .0052 .0056 .006 .0065 .007 .0075 .008 .0086 .0091 .0097 .0103 .011 .0116 .0123 .013 .0137 .0144 .0152 .016 .0168 .0176 .0185 .0194 .0203 .0212 .0222 .0232 .0242 .0252 .0262 .0273 .0284 .0296 .0307 .0319 .0331 .0343 .0356 .0369 .0382 .0395 .0409 .0423 .0437 .0452 .0467 .0482 .0497 .0513 .0529 .0545 .0561 .0578 .0595 .0612 .063 .0648 .0666 .0685 .0704 .0723 .0742 .0762 .0782 .0802 .0823 .0844 .0865 .0887 .0908 .0931 .0953 .0976 .0999 .1022 .1046 .107 .1095 .1119 .1144 .117 .1195 .1221 .1248 .1274 .1301 .1329 .1356 .1384 .1413 .1441 .147 .15 .1529 .1559 .159 .162 .1651 .1683 .1714 .1746 .1779 .1812 .1845 .1878 .1912 .1946 .1981 .2016 .2051 .2086 .2122 .2159 .2195 .2232 .227 .2307 .2346 .2384 .2423 .2462 .2502 .2542 .2582 .2623 .2664 .2705 .2747 .2789 .2831 .2874 .2918 .2961 .3005 .305 .3095 .314 .3185 .3231 .3278 .3325 .3372 .3419 .3467 .3515 .3564 .3613 .3663 .3712 .3763 .3813 .3864 .3916 .3968 .402 .4072 .4125 .4179 .4233 .4287 .4342 .4397 .4452 .4508 .4564 .4621 .4678 .4735 .4793 .4851 .491 .4969 .5029 .5089 .5149 .521 .5271 .5333 .5395 .5457 .552 .5583 .5647 .5711 .5776 .5841 .5906 .5972 .6038 .6105 .6172 .624 .6308 .6376 .6445 .6514 .6584 .6654 .6724 .6795 .6867 .6939 .7011 .7084 .7157 .7231 .7305 .7379 .7454 .7529 .7605 .7682 .7758 .7835 .7913 .7991 .807 .8148 .8228 .8308 .8388 .8469 .855 .8632 .8714 .8796 .8879 .8963 .9047 .9131 .9216 .9301 .9387 .9473 .956 .9647 .9734 .9823 .9911 1;

  $rgb : (
    "r": color.red($color),
    "g": color.green($color),
    "b": color.blue($color)
  );

  @each $name, $value in $rgb {
    $value : if(math.div($value, 255) < .03928, math.div(math.div($value, 255), 12.92), list.nth($_luminance-list, $value + 1));
    $rgb : map.merge($rgb, ($name: $value));
  }

  @return (map.get($rgb, "r") * .2126) + (map.get($rgb, "g") * .7152) + (map.get($rgb, "b") * .0722);
}