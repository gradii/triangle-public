@use "sass:color";
@use "sass:map";
@use "sass:math";
@use "sass:meta";
@use "variables-palette" as palette;


// For a given hue in a palette, return the contrast color from the map of contrast palettes.
// @param $color-map
// @param $hue
@function tri-contrast($palette, $hue) {
  @return map.get(map.get($palette, contrast), $hue);
}


// Creates a map of hues to colors for a theme. This is used to define a theme palette in terms
// of the Material Design hues.
// @param $color-map
// @param $primary
// @param $lighter
@function tri-palette($base-palette, $default: 500, $lighter: 100, $darker: 700, $text: $default) {
  $result : map.merge($base-palette, (
    default: map.get($base-palette, $default),
    lighter: map.get($base-palette, $lighter),
    darker: map.get($base-palette, $darker),
    text: map.get($base-palette, $text),
    default-contrast: tri-contrast($base-palette, $default),
    lighter-contrast: tri-contrast($base-palette, $lighter),
    darker-contrast: tri-contrast($base-palette, $darker)
  ));

  // For each hue in the palette, add a "-contrast" color to the map.
  @each $hue, $color in $base-palette {
    $result : map.merge($result, (
      #{$hue}-contrast: tri-contrast($base-palette, $hue)
    ));
  }

  @return $result;
}


// Gets a color from a theme palette (the output of tri-palette).
// The hue can be one of the standard values (500, A400, etc.), one of the three preconfigured
// hues (default, lighter, darker), or any of the aforementioned prefixed with "-contrast".
//
// @param $color-map The theme palette (output of tri-palette).
// @param $hue The hue from the palette to use. If this is a value between 0 and 1, it will
//     be treated as opacity.
// @param $opacity The alpha channel value for the color.
@function tri-color($palette, $hue: default, $opacity: null) {
  // If hueKey is a number between zero and one, then it actually contains an
  // opacity value, so recall this function with the default hue and that given opacity.
  @if meta.type-of($hue) == number and $hue >= 0 and $hue <= 1 {
    @return tri-color($palette, default, $hue);
  }

  $color : map.get($palette, $hue);

  @if (meta.type-of($color) != color) {
    // If the $color resolved to something different from a color (e.g. a CSS variable),
    // we can't apply the opacity anyway so we return the value as is, otherwise Sass can
    // throw an error or output something invalid.
    @return $color;
  }

  @return rgba($color, if($opacity == null, opacity($color), $opacity));
}


@function _cp_strip-units($number) {
  @return math.div($number, $number * 0 + 1);
}

// We create a very complex algorithm which take the place of original tint/shade color system
// to make sure no one can understand it ðŸ‘»
// and create an entire color palette magicly by inputing just a single primary color.
// We are using bezier-curve easing function and some color manipulations like tint/shade/darken/spin

$_warm-dark   : 0.5; // warm color darken radio
$_warm-rotate : -26; // warm color rotate degree
$_cold-dark   : 0.55; // cold color darken radio
$_cold-rotate : 10; // cold color rotate degree

//$_bezier-curve: (0.26, 0.09, 0.37, 0.18);

@function _get-shade-color($c) {
  $shade-color : $c;
  // warm and cold color will darken in different radio, and rotate in different degree
  // warmer color
  @if color.red($shade-color) > color.blue($shade-color) {
    $color : color.adjust($shade-color, $lightness : -(color.lightness($shade-color) * $_warm-dark));
    @return color.adjust($color, $hue : $_warm-rotate);
  }
  // colder color
  $color : color.adjust($shade-color, $lightness : -(color.lightness($shade-color) * $_cold-dark));
  @return color.adjust($color, $hue : $_cold-rotate);
}

@function tri-color-palette($color, $index) {
  @if (meta.type-of($color) != "color") {
    @error "`#{$color}` is not a color.";
  }

  $primary-easing : 0.6;
  $current-easing : $index * 0.1;

  // return light colors after tint
  @if ($index <= 6) {
    @return color.mix(
        #ffffff,
        $color,
        math.percentage(1 - math.div($current-easing, $primary-easing))
    );
  }
  @return color.mix(
      _get-shade-color($color),
      $color,
      math.percentage(math.div($current-easing - $primary-easing, 100 - $primary-easing))
  );
}
