@use "sass:math";
@use "../../core/style/legend/menu-common";
@use "../../core/style/legend/list-common";
@use "../../core/style/variables";
@use "../../core/style/mixins";
@use "../../core/style/legend/vendor-prefixes";
@use "../../core/style/cdk/a11y";

$arrow-size              : 5px !default;
$arrow-margin            : 4px !default;
$select-panel-max-height : 256px !default;
$select-item-height      : 2rem !default;

$placeholder-arrow-space : 2 * ($arrow-size + $arrow-margin);

$select-height           : 2rem;

.tri-select {
  display         : inline-flex;
  flex-direction  : column;
  justify-content : center;

  width           : 100%;
  outline         : none;
  height          : $select-height;
}

.tri-select-trigger {
  display    : inline-table;
  cursor     : pointer;
  position   : relative;
  box-sizing : border-box;

  .tri-select-disabled & {
    @include vendor-prefixes.user-select(none);
    cursor : default;
  }
}

.tri-select-lg {
  height: 3rem;
}

.tri-select-sm {
  height: 2rem;
}

.tri-select-value {
  display       : table-cell;
  max-width     : 0;
  width         : 100%;
  overflow      : hidden;
  text-overflow : ellipsis;
  white-space   : nowrap;
}

.tri-select-value-text {
  @include list-common.truncate-line();
}

.tri-select-arrow-wrapper {
  display       : inline-block;
  margin-top    : auto;
  margin-bottom : auto;


  // When used in a box appearance form-field the arrow should be shifted up 50%.
  .tri-form-field-appearance-fill & {
    transform : translateY(-30%);
  }

  //// When used in a outline form-field the arrow should be shifted up 25%.
  //.tri-form-field-appearance-outline & {
  //  transform : translateY(-25%);
  //}

  // When used in a standard appearance form-field the arrow should be shifted up 50%,
  // but only if it's not empty and it has a label.
  .tri-form-field-appearance-standard.tri-form-field-has-label
  .tri-select:not(.tri-select-empty) & {
    transform : translateY(-50%);
  }

  // Animate the arrow position, but only when the transitioning to empty (animate the arrow down)
  // This is in line with the tri-form-field label animation
  .tri-form-field-appearance-standard .tri-select.tri-select-empty & {
    transition : transform variables.$swift-ease-out-duration variables.$swift-ease-out-timing-function;
  }

  ._tri-animation-noopable.tri-form-field-appearance-standard .tri-select.tri-select-empty & {
    transition : none;
  }
}

.tri-select-arrow-icon {
}

.tri-select-panel-wrap {
  // Prevents width-issues of tri-select-panel with width: calc(100% + 32px)
  // in IE11 due to the parents display: flex;
  flex-basis : 100%;
}

.tri-select-panel {
  @include menu-common.tri-menu-base();
  padding-top    : 0;
  padding-bottom : 0;
  max-height     : $select-panel-max-height;
  min-width      : 100%; // prevents some animation twitching and test inconsistencies in IE11
  border-radius  : 4px;
  outline        : 0;

  @include a11y.cdk-high-contrast(active, off) {
    outline : solid 1px;
  }
}

// Override optgroup and option to scale based on font-size of the trigger.
.tri-select-panel {
  .tri-optgroup-label,
  .tri-option {
    font-size   : inherit;
    line-height : $select-item-height;
    height      : $select-item-height;
  }

  @include mixins.tri-elevation(4)
}

.tri-form-field-type-tri-select {
  &:not(.tri-form-field-disabled) .tri-form-field-flex {
    cursor : pointer;
  }

  //.tri-form-field-label {
  //  width : calc(100% - #{$placeholder-arrow-space});
  //}
}

.tri-select-placeholder {
  // Delay the transition until the label has animated about a third of the way through, in
  // order to prevent the placeholder from overlapping for a split second.
  transition : color variables.$swift-ease-out-duration math.div(variables.$swift-ease-out-duration, 3) variables.$swift-ease-out-timing-function;

  ._tri-animation-noopable & {
    transition : none;
  }

  .tri-form-field-hide-placeholder & {
    color                   : transparent;

    // Overwrite browser specific CSS properties that can overwrite the `color` property.
    // Some developers seem to use this approach to easily overwrite the placeholder / label color.
    -webkit-text-fill-color : transparent;

    // Remove the transition to prevent the placeholder
    // from overlapping when the label comes back down.
    transition              : none;
    // Prevents the '...' from showing on the parent element.
    display                 : block;
  }
}

// Used to prevent inline elements from collapsing if their text bindings
// become empty. This is preferrable to inserting a blank space, because the
// space can be read out by screen readers (see #21725).
.tri-select-min-line:empty::before {
  content     : " ";
  white-space : pre;
  width       : 1px;

  // Prevents some browsers from rendering the element in high contrast mode.
  display     : inline-block;
  opacity     : 0;
}
