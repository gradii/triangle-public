import { CheckboxState } from '@gradii/triangle/checkbox';
import { map, Observable, of, tap } from 'rxjs';
import { TreeViewBaseControl } from './tree-view.base-control';

export enum TreeViewNodeFlags {
  Visible          = 0b1,
  Match            = 0b10,
  ChildFilterMatch = 0b100,
  // Disabled        = 0b10,
  // AllowDragging   = 0b100,
  Indeterminate    = 0b1000,
  // AllowSorting    = 0x10,
  // AutoGenerated   = 0x20,
  // Collapsed       = 0b100_0000, //todo maybe expose
  // Selected        = 0b1_0000_0000,
  ReadOnly         = 0b10_0000_0000,
  WordWrap         = 0b100_0000_0000,
  NodeDefault      = Visible /*| Collapsed*/ /*| AllowDragging*/ /*| AllowResizing*//* | AllowSorting*/
}

let uid = 0;

export class TreeViewNode {
  _flags = TreeViewNodeFlags.NodeDefault;

  loadedChildren: any[];

  uid: string = `${uid++}`;

  level: 0;


  get id() {
    return this.treeViewData.id;
  }

  get text() {
    return this.treeViewData.text;
  }

  get items() {
    return this.treeViewData.items;
  }

  get dataItem() {
    return this.treeViewData;
  }

  prefetchChildren(): this[] {
    if (this.loadedChildren) {
      return this.loadedChildren;
    }

    return this.treeViewControl.prefetchChildren(this);
  }

  /**
   * @todo collection view add virtual scroll view port
   */
  fetchChildren(): Observable<this[]> {
    if (this.loadedChildren) {
      return of(this.loadedChildren);
    }
    return this.treeViewControl.fetchChildren(this).pipe(
      map((list) => {
        return list.map((it) => {
          if (it instanceof TreeViewNode) {
            return it;
          } else {
            return new TreeViewNode(this.childrenField, it, this.treeViewControl, this);
          }
        });
      }),
      tap((list) => {
        this.loadChildren(list);
      })
    );
  }


  get hasChildren() {
    return this.treeViewControl.hasChildren(this);
  }

  get isVisible(): boolean {
    return this.treeViewControl.isVisible(this);
  }

  set isVisible(visible: boolean) {
    this.treeViewControl.setIsVisible(this, visible);
  }

  get isMatch(): boolean {
    return this.treeViewControl.isFilterMatch(this);
  }

  set isMatch(match: boolean) {
    this.treeViewControl.setMatch(this, match);
  }

  get isChildFilterMatch(): boolean {
    return this.treeViewControl.isChildFilterMatch(this);
  }

  set isChildFilterMatch(match: boolean) {
    this.treeViewControl.setChildFilterMatch(this, match);
  }

  get isDisabled(): boolean {
    return this.treeViewControl.disableModel.isDisabled(this);
  }

  get isExpanded(): boolean {
    return this.treeViewControl.expandModel.isExpanded(this);
  }

  get isSelected(): boolean {
    return this.treeViewControl.selectModel.isSelected(this);
  }

  isSelectedFn = () => {
    return this.isSelected;
  };

  get isIndeterminate(): boolean {
    return this.treeViewControl.checkModel.isIndeterminate(this);
  }

  loadChildren(list: TreeViewNode[], offset: number = 0) {
    this.loadedChildren = list;
    this.treeViewControl.checkModel.reCheckNode(this);
  }

  expandNode(bool: boolean) {
    if (!this.isDisabled) {
      this.treeViewControl.expandModel.expandNode(this, bool);
    }
  }

  /**
   * @todo remove index param
   * @param index
   */
  toggleCheckNode(index?: string) {
    if (!this.isDisabled) {
      this.treeViewControl.checkModel.toggleCheckNode(this);
    }
  }

  /**
   * @todo remove index param
   * @param index
   */
  selectNode(index?: string) {
    if(!this.isDisabled) {
      this.treeViewControl.selectModel.selectNode(this);
    }
  }

  get isChecked(): boolean {
    return this.treeViewControl.checkModel.isChecked(this);
  };

  get checkState(): CheckboxState {
    if (this.isIndeterminate) {
      return 'indeterminate';
    }
    return this.treeViewControl.checkModel.isChecked(this) ? 'checked' : 'unchecked';
  };

  constructor(public childrenField: string,
              public treeViewData: any,
              public treeViewControl: TreeViewBaseControl,
              public parentNode: TreeViewNode | null) {
    console.log(this.uid);

    if (this.hasChildren) {
      this.prefetchChildren();
    }
  }
}